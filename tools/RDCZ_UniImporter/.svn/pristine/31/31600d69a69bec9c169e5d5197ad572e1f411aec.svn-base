/* *****************************************************************************
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.incad.relief3.rdcz.uniimporter.model;

import cz.incad.relief3.rdcz.uniImporter.model.Issue;
import cz.incad.relief3.rdcz.uniimporter.utils.Configuration;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;

/** ****************************************************************************
 *
 * @author martin
 */
public class FileNameParser {
    private static final Logger LOG = Logger.getLogger(FileNameParser.class.getName());
    private static final String SPLITTER                = "_";
    private static final String SIGN_ZAMER              = "z";
    private static final String SIGN_PROBIHA            = "p";
    private static final String SIGN_HOTOVO             = "h";


    /** ************************************************************************
     * Privátní konstruktor
     */
    private FileNameParser() {
    }

    /** ************************************************************************
     * 
     * @param file
     * @return 
     */
    public static Issue processFile(File file) {
        String fileName = file.getName();
        String[] splited = fileName.split(SPLITTER);
        LOG.log(Level.INFO, "Filename parsing starting: {0}", fileName);

        if (splited.length >= 3) {
            String sigla = splited[1];
            String state = splited[2];
            try {
                return new Issue(file, ParserMethodEnum.valueOf(Configuration.getInstance().getProperty(Configuration.KEY_PARSE_METHOD)), getState(state), sigla);
            } catch(IllegalArgumentException ex) {
                LOG.log(Level.WARNING, "Filename parsing fail: {0} - EX: {1}", new Object[]{fileName, ex.getMessage()});
                return null;
            }
        }
        LOG.log(Level.WARNING, "Filename parsing fail: {0}", fileName);
        return null;
    }

    /** ************************************************************************
     * 
     * @param value
     * @return 
     */
    private static DataStateEnum getState(String value) {
        if (value == null) return null;
        String temp = value.toLowerCase();
        if (SIGN_ZAMER.equals(temp)) return DataStateEnum.ZAMER;
        if (SIGN_PROBIHA.equals(temp)) return DataStateEnum.PROBIHA;
        if (SIGN_HOTOVO.equals(temp)) return DataStateEnum.HOTOVO;

        throw new IllegalArgumentException("Unknown state value: " + value);
    }

}

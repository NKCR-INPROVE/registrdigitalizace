/* *****************************************************************************
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.incad.relief3.rdcz.uniimporter.utils;

import cz.incad.relief3.rdcz.uniimporter.model.ParserMethodEnum;
import cz.incad.relief3.rdcz.uniimporter.model.DataListenerEnum;
//import cz.incad.relief3.rdcz.uniImporter.model.enums.ParserMethodEnum;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/** ****************************************************************************
 *
 * @author martin
 */
public class Configuration {
    private static final Logger LOG = Logger.getLogger(Configuration.class.getName());
    private static final String CONFIGURATION_FILE      = "conf.properties";
    private Properties properties;
    private final String WORKING_DIRECTORY;
    private final String ARCHIVE_DIRECTORY;
    private final String FAIL_DIRECTORY;
    private static final Configuration _instance        = new Configuration();
    public final File F_WORKING_DIRECTORY;
    public final File F_ARCHIVE_DIRECTORY;
    public final File F_FAIL_DIRECTORY;
    //PROPERTIES KEYS
    public static final String KEY_DATA_SOURCE          = "DATA.SOURCE";
    public static final String KEY_DATA_DIRECTORY       = "DATA.DIRECTORY";

    public static final String KEY_PARSE_METHOD         = "PARSE.METHOD";
    public static final String KEY_PARSE_ENCODING       = "PARSE.ENCODING";
    public static final String KEY_PARSE_1_SEPARATOR    = "PARSE.1.SEPARATOR";
    
    public static final String KEY_RELIEF_URL           = "RELIEF.URL";
    public static final String KEY_RELIEF_OVERRIDE_USER = "RELIEF.OVERRIDE.USER";
    public static final String KEY_RELIEF_OVERRIDE_PASS = "RELIEF.OVERRIDE.PASS";
    
    public static final String KEY_IMPORT_TEST          = "IMPORT.TEST";


    /** ************************************************************************
     * Privátní konstruktor
     */
    private Configuration() {
        WORKING_DIRECTORY   = "xHEAP";
        F_WORKING_DIRECTORY = new File(this.WORKING_DIRECTORY);
        
        ARCHIVE_DIRECTORY   = "xARCHIVE";
        F_ARCHIVE_DIRECTORY = new File(this.ARCHIVE_DIRECTORY);
        
        FAIL_DIRECTORY   = "xFAIL";
        F_FAIL_DIRECTORY = new File(this.FAIL_DIRECTORY);
 
        try {
            this.properties = new Properties();
            File fConfiguration = new File(CONFIGURATION_FILE);
            LOG.log(Level.INFO, "Loading configuration ''{0}''", fConfiguration.getAbsolutePath());
            FileReader fReader = new FileReader(fConfiguration);
            this.properties.load(fReader);
            //Proběhne validace načtených properties
            propertiesValidation();
        } catch (FileNotFoundException e) {
            LOG.log(Level.SEVERE,e.getMessage(),e);
        } catch (IOException e) {
            LOG.log(Level.SEVERE,e.getMessage(),e);
        }
    }

    /** ************************************************************************
     * 
     * @param key
     * @return 
     */
    public String getProperty(String key) {
        return this.properties.getProperty(key);
    }

    /** ************************************************************************
     * 
     * @return 
     */
    public Set<Object> keySet() {
        return properties.keySet();
    }

    /** ************************************************************************
     * 
     * @param key
     * @return 
     */
    public boolean containsKey(Object key) {
        return properties.containsKey(key);
    }

    /** ************************************************************************
     * 
     * @return 
     */
    public static Configuration getInstance() {
        return _instance;
    }

    /** ************************************************************************
     * Kontrolije zdali jsou v konfiguračním souboru všechna potřebná nastavení.
     */
    private void propertiesValidation() throws IOException {
        String pValueDataSource = this.properties.getProperty(KEY_DATA_SOURCE);
        String pValueParseMethod = this.properties.getProperty(KEY_PARSE_METHOD);

        //Kontrola globálních proměných
        if (!F_WORKING_DIRECTORY.canWrite()){
            LOG.log(Level.INFO, "Creating directory: {0}", F_WORKING_DIRECTORY.getAbsolutePath());
            if (!F_WORKING_DIRECTORY.mkdir()) {
                throw new IOException("Creating directory fail: " + F_WORKING_DIRECTORY.getAbsolutePath());
            }
            
        }

        if (!F_ARCHIVE_DIRECTORY.canWrite()){
            LOG.log(Level.INFO, "Creating directory: {0}", F_ARCHIVE_DIRECTORY.getAbsolutePath());
            if (!F_ARCHIVE_DIRECTORY.mkdir()) {
                throw new IOException("Creating directory fail: " + F_ARCHIVE_DIRECTORY.getAbsolutePath());
            }
        }

        if (!F_FAIL_DIRECTORY.canWrite()){
            LOG.log(Level.INFO, "Creating directory: {0}", F_FAIL_DIRECTORY.getAbsolutePath());
            if (!F_FAIL_DIRECTORY.mkdir()) {
                throw new IOException("Creating directory fail: " + F_FAIL_DIRECTORY.getAbsolutePath());
            }
        }

        // Kontrola DATA.SOURCE
        if (DataListenerEnum.DIRECTORY.toString().equals(pValueDataSource)) {
            //Kontrola jestli existuje adresář s daty
            File fDataDirectory = new File(this.properties.getProperty(KEY_DATA_DIRECTORY));
            if (!fDataDirectory.canWrite()){
                LOG.log(Level.INFO, "Creating directory: {0}", fDataDirectory.getAbsolutePath());
                if (!fDataDirectory.mkdir()) {
                    throw new IOException("Creating directory fail: " + fDataDirectory.getAbsolutePath());
                }
            }

        } else if (DataListenerEnum.FTP.toString().equals(pValueDataSource)) {
            
        } else if (DataListenerEnum.OAIPMH.toString().equals(pValueDataSource)) {
            
        } else if (DataListenerEnum.ZAHORIKWAY.toString().equals(pValueDataSource)) {
            
        } else {
            // Nepodporovaná hodnota
            throw new UnsupportedOperationException("Unsupported value of " + KEY_DATA_SOURCE);
        }

        // Kontorla PARSE.METHOD
        if (ParserMethodEnum.CSV.toString().equals(pValueParseMethod)) {
            
        } else if (ParserMethodEnum.MARCXML.toString().equals(pValueParseMethod)) {
            
        } else if (ParserMethodEnum.UNIMARC.toString().equals(pValueParseMethod)) {
            
        } else {
            // Nepodporovaná hodnota
            throw new UnsupportedOperationException("Unsupported value of " + KEY_PARSE_METHOD);
        }
    }

}

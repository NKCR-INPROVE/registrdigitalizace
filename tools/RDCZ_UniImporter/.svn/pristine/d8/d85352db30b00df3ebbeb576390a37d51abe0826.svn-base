/* *****************************************************************************
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.incad.relief3.rdcz.uniimporter.demons;

import cz.incad.commontools.utils.StringUtils;
import cz.incad.commontools.utils.oaipmh.Harvester;
import cz.incad.relief3.rdcz.uniimporter.model.DataHarvesterDemon;
//import static cz.incad.relief3.rdcz.uniimporter.model.DataHarvesterDemon.TEMPORARY_DIRECTORY;
import cz.incad.relief3.rdcz.uniimporter.model.IssueHeap;
import cz.incad.relief3.rdcz.uniimporter.model.OneIssue;
import cz.incad.relief3.rdcz.uniimporter.utils.Configuration;
import cz.incad.relief3.rdcz.uniimporter.utils.OneSource;
import cz.incad.relief3.rdcz.uniimporter.utils.TimeStamp;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/** ****************************************************************************
 *
 * @author martin.novacek@incad.cz
 */
public class DataHarvesterDemonOaipmh extends DataHarvesterDemon {
    private static final Logger LOG = Logger.getLogger(DataHarvesterDemonOaipmh.class.getName());
    private String OAIPMH_SERVER_URL;
    private String OAIPMH_COMMAND;
    private String FILE_NAME_STATIC;
    private String ENCODING_INPUT_XML;
    private String ENCODING_OUTPUT_XML;
    private String FROM_FILE;
    private String oaipmhFrom;


    /** ************************************************************************
     * 
     * @param source 
     */
    public DataHarvesterDemonOaipmh(OneSource source) {
        super(source);
    }

    /** ************************************************************************
     * Metoda kontrolující parametry Source.
     * @return 
     */
    protected final boolean validateSource() {
        this.OAIPMH_SERVER_URL      = source.source_argument1;
        this.OAIPMH_COMMAND         = source.source_argument2;
        this.FILE_NAME_STATIC       = source.source_argument3;
        this.ENCODING_INPUT_XML     = source.source_argument4;
        this.ENCODING_OUTPUT_XML    = source.source_argument5;
        this.FROM_FILE              = source.source_argument6;

        if (this.OAIPMH_SERVER_URL == null || this.OAIPMH_SERVER_URL.length() == 0) {
            return false;
        }

        if (this.OAIPMH_COMMAND == null || this.OAIPMH_COMMAND.length() == 0) {
            return false;
        }

        if (this.FILE_NAME_STATIC == null || this.FILE_NAME_STATIC.length() == 0) {
            return false;
        }

        if (this.ENCODING_INPUT_XML == null || this.ENCODING_INPUT_XML.length() == 0) {
            return false;
        }

        if (this.ENCODING_OUTPUT_XML == null || this.ENCODING_OUTPUT_XML.length() == 0) {
            return false;
        }

        if (this.FROM_FILE != null) {
            try {
                this.oaipmhFrom = getFromValue();
            } catch (IOException ex) {
                LOG.log(Level.SEVERE, null ,ex);
                return false;
            }
        } else {
            return false;
        }

        return true;
    }

    /** ************************************************************************
     * Metoda sklízející data z OAIPMH
     */
    public void getData() {
        OneIssue oneIssue;
        Harvester harvester;
        List<File> lFiles = null;
        String fromDateNext;
        BufferedWriter fromOutStream;
        Calendar cal;

        try {
            //Načteme čas ze souboru from
            this.oaipmhFrom = getFromValue();
            //Zapíšeme čas hartvestu pro příští pokus
            cal = new GregorianCalendar();
            fromDateNext = cal.get(Calendar.YEAR) + "-" + StringUtils.getFormatedNumber("", 2, cal.get(Calendar.MONTH) + 1, "") + "-" + StringUtils.getFormatedNumber("", 2, cal.get(Calendar.DAY_OF_MONTH), "") + "T" + StringUtils.getFormatedNumber("", 2, cal.get(Calendar.HOUR_OF_DAY), "") + ":" + StringUtils.getFormatedNumber("", 2, cal.get(Calendar.MINUTE), "") + ":" + StringUtils.getFormatedNumber("", 2, cal.get(Calendar.SECOND), "") + "Z";

            harvester = new Harvester(this.OAIPMH_SERVER_URL, this.OAIPMH_COMMAND + this.oaipmhFrom, Configuration.getInstance().F_WORKING_DIRECTORY.getAbsolutePath(), this.ENCODING_INPUT_XML, this.ENCODING_OUTPUT_XML);
            lFiles = harvester.harvestIt(true, TimeStamp.getTimeStamp() + "_" + this.FILE_NAME_STATIC);
            if (lFiles != null && lFiles.size() > 0) {
                //datum sklizně zapíšeme pouze když se podaří něco úspěšně sklidit
                if (this.FROM_FILE != null && this.FROM_FILE.length() > 0) {
                    fromOutStream = new BufferedWriter(new FileWriter(this.FROM_FILE));
                    fromOutStream.write(fromDateNext);
                    fromOutStream.flush();
                    fromOutStream.close();
                }
            }

        } catch(Exception ex) {
            LOG.log(Level.SEVERE, "Harvest data failed.", ex);
        }

        if (lFiles == null || lFiles.size() == 0) {
            LOG.log(Level.INFO, "No harvested data.");
            return;
        }

        //Pozakládáme pro stažené soubory issues
        for (int i = 0; i < lFiles.size(); i++) {
            //Vytvoříme nové OneIssue
            oneIssue = new OneIssue(lFiles.get(i), source);
            //Zapíšeme do issue informace o Properties
            oneIssue.appendLogPropertiesInfo(this.source.getInfo());
            //Zaregistrujeme nové OneIssue do IssueHeap
            IssueHeap.getInstance().addIssue(oneIssue);
            LOG.log(Level.INFO, "ISSUE ADDED: {0}", lFiles.get(i).getName());
        }
    }

    /** ************************************************************************
     * 
     * @return 
     */
    private String getFromValue() throws IOException {
        BufferedReader fromInStream;
        String temp;
        
        if (this.FROM_FILE.length() > 0) {
            fromInStream = new BufferedReader(new FileReader(this.FROM_FILE));
            temp = fromInStream.readLine();
            if (temp == null) {
                return "";
            } else {
                return "&from=" + temp;
            }
        }
        return "";
    }

}
